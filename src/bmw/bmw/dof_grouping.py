import scipy
import h5py
import numpy
from bmw import mesh_generation

def generate_boundary_groups(
        mesh, fig, side='rhs', skin=False, visualise_points=False,
        visualise_nodes=False, visualise_stiffer_shoulder_nodes=False,
        visualise_fixed_shoulder_nodes=False, export_groups = False,
        export_folder='./', lhs_Xn_offset=[], lhs_Xe_offset=[], debug=False):
    # Specify volume mesh element groups
    if skin:
        cranial_elem = range(11) + range(66,77)
        caudal_elem = range(55,66) + range(121,132)
        sternum_elem = [0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121]
        spine_elem = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109, 120, 131]
        chestwall_elem = range(66)
        skin_elem = range(66,132)
    else:
        cranial_elem = scipy.array(range(11))
        caudal_elem = scipy.array(range(55,66))
        sternum_elem = scipy.array([0,11,22,33,44,55])
        spine_elem = scipy.array([10,21,32,43,54,65])
        chestwall_elem = scipy.array(range(66))
        skin_elem = scipy.array(range(66))
        if side == 'both':
            cranial_elem = scipy.hstack([cranial_elem, cranial_elem + lhs_Xe_offset])
            caudal_elem = scipy.hstack([caudal_elem, caudal_elem + lhs_Xe_offset])
            chestwall_elem = scipy.hstack([chestwall_elem, chestwall_elem + lhs_Xe_offset])
            skin_elem = scipy.hstack([skin_elem, skin_elem + lhs_Xe_offset])
    #import ipdb; ipdb.set_trace()
    for element in mesh.elements[cranial_elem.tolist()]:
        element.add_to_group('cranial')
    for element in mesh.elements[caudal_elem.tolist()]:
        element.add_to_group('caudal')
    for element in mesh.elements[chestwall_elem.tolist()]:
        element.add_to_group('chestwall')
    for element in mesh.elements[skin_elem.tolist()]:
        element.add_to_group('skin')
    if side != 'both':
        for element in mesh.elements[sternum_elem.tolist()]:
            element.add_to_group('sternum')
        for element in mesh.elements[spine_elem.tolist()]:
            element.add_to_group('spine')

    rhs_stiffer_elements = scipy.array([11,22,33,44,55,66])-1
    rhs_transitional_elements = rhs_stiffer_elements
    stiffer_rib_elements = scipy.array([9,20,31,42,53,64,75,86,97,108,119,130])-1
    if side == 'both':
        lhs_stiffer_elements = rhs_stiffer_elements + lhs_Xe_offset
        stiffer_elements = scipy.hstack([rhs_stiffer_elements, lhs_stiffer_elements])

        lhs_transitional_elements = rhs_transitional_elements + lhs_Xe_offset
        transitional_elements = scipy.hstack([rhs_transitional_elements, lhs_transitional_elements])

        lhs_element_node_idxs = [3,15,51,63]
        lhs_transitional_nodes = []
        for element_id in lhs_transitional_elements:
            element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
            lhs_transitional_nodes += element_node_ids[lhs_element_node_idxs].tolist()
        lhs_transitional_nodes = numpy.unique(lhs_transitional_nodes).tolist()

        rhs_element_node_idxs = [0,12,48,60]
        rhs_transitional_nodes = []
        for element_id in rhs_transitional_elements:
            element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
            rhs_transitional_nodes += element_node_ids[rhs_element_node_idxs].tolist()
        rhs_transitional_nodes = numpy.unique(rhs_transitional_nodes).tolist()

        # Add dodes between the transitional stiffer nodes to the stiffer shoulder nodes on the cranial surface
        lhs_transitional_nodes += [10024,10027,11962,11965]
        rhs_transitional_nodes += [24,27,1962,1965]

        transitional_nodes = scipy.hstack(
            [scipy.array(lhs_transitional_nodes),
             scipy.array(rhs_transitional_nodes)])

        stiffer_rib_node_idxs = [0,3,12,15]
        stiffer_rib_nodes = []
        for element_id in stiffer_rib_elements:
            element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
            stiffer_rib_nodes += element_node_ids[stiffer_rib_node_idxs].tolist()
        stiffer_rib_nodes = numpy.unique(stiffer_rib_nodes)
        if debug:
            if side == 'both':
                fig.plot_points('stiffer_rib_nodes_' + side, mesh.get_nodes(stiffer_rib_nodes.tolist()), color=(0,1,1), size=5)
                import ipdb; ipdb.set_trace()
    else: 
        # Since the lhs mesh generated by flipping the rhs mesh along the xi1 axis,
        # the lhs element/node numbers are the same as for the rhs
        stiffer_elements = rhs_stiffer_elements

    linear_elem_node_idxs = [0,3,12,15,48,51,60,63]
    stiffer_nodes = []
    for element_id in stiffer_elements:
        element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
        stiffer_nodes += element_node_ids[linear_elem_node_idxs].tolist()
    stiffer_nodes = numpy.unique(stiffer_nodes)

    # Define volume mesh node groups
    if side != 'both':
        if side == 'rhs':
            sternum_xi1 = 0
            spine_xi1 = 1
        elif side == 'lhs':
            sternum_xi1 = 1
            spine_xi1 = 0
        sternum_points = mesh_generation.generate_points_on_face(
            mesh, "xi1", sternum_xi1, element_ids=sternum_elem.tolist())
        spine_points = mesh_generation.generate_points_on_face(
            mesh, "xi1", spine_xi1, element_ids=spine_elem.tolist())
    cranial_points = mesh_generation.generate_points_on_face(
            mesh, "xi2", 0, element_ids=cranial_elem.tolist())
    caudal_points = mesh_generation.generate_points_on_face(
            mesh, "xi2", 1, element_ids=caudal_elem.tolist())
    chestwall_points = mesh_generation.generate_points_on_face(
            mesh, "xi3", 0, element_ids=chestwall_elem.tolist())
    skin_points = mesh_generation.generate_points_on_face(
            mesh, "xi3", 1, element_ids=skin_elem.tolist())

    if visualise_points:
        fig.plot_points('cranial_points_' + side, cranial_points, color=(1,0,0), size=5)
        fig.plot_points('caudal_points_' + side, caudal_points, color=(0,1,0), size=5)
        fig.plot_points('chestwall_points_' + side, chestwall_points, color=(0,0,1), size=5)
        fig.plot_points('skin_points_' + side, skin_points, color=(0,1,1), size=5)
        if side != 'both':
            fig.plot_points('sternum_points_' + side, sternum_points, color=(0,0,1), size=5)
            fig.plot_points('spine_points_' + side, spine_points, color=(1,1,0), size=5)
    cranial_nodes = scipy.unique(mesh_generation.points_2_nodes_id(mesh, cranial_points))
    caudal_nodes = scipy.unique(mesh_generation.points_2_nodes_id(mesh, caudal_points))
    chestwall_nodes = scipy.unique(mesh_generation.points_2_nodes_id(mesh, chestwall_points))
    skin_nodes = scipy.unique(mesh_generation.points_2_nodes_id(mesh, skin_points))
    if side != 'both':
        sternum_nodes = scipy.unique(mesh_generation.points_2_nodes_id(mesh, sternum_points))
        spine_nodes = scipy.unique(mesh_generation.points_2_nodes_id(mesh, spine_points))
    #import ipdb; ipdb.set_trace()
    if visualise_nodes:
        fig.plot_points('cranial_nodes_' + side, mesh.get_nodes(cranial_nodes.tolist()), color=(1,0,0), size=5)
        fig.plot_points('caudal_nodes_' + side, mesh.get_nodes(caudal_nodes.tolist()), color=(0,1,0), size=5)
        fig.plot_points('chestwall_nodes_' + side, mesh.get_nodes(chestwall_nodes.tolist()), color=(1,0,1), size=5)
        fig.plot_points('skin_nodes_' + side, mesh.get_nodes(skin_nodes.tolist()), color=(0,1,1), size=5)
        if side != 'both':
            fig.plot_points('sternum_nodes_' + side, mesh.get_nodes(sternum_nodes.tolist()), color=(0,0,1), size=5)
            fig.plot_points('spine_nodes_' + side, mesh.get_nodes(spine_nodes.tolist()), color=(1,1,0), size=5)

    # Mechanics related dof groups
    if side == 'both':
        stiffer_shoulder_nodes = scipy.array([21,123,1959,2061])
        stiffer_shoulder_nodes = scipy.hstack([stiffer_shoulder_nodes, stiffer_shoulder_nodes + lhs_Xn_offset])
        if visualise_stiffer_shoulder_nodes:
            fig.plot_points(fig, 'stiffer_shoulder_nodes', mesh.get_nodes(stiffer_shoulder_nodes.tolist()), stiffer_shoulder_nodes, visualise=visualise, colours=(0,0,1), point_size=10, text_size=5)

        fixed_shoulder_nodes = scipy.array([21,667,1313,1959])
        fixed_shoulder_nodes = scipy.hstack([fixed_shoulder_nodes, fixed_shoulder_nodes + lhs_Xn_offset])
        if visualise_fixed_shoulder_nodes:
            fig.plot_points(fig, 'fixed_shoulder_nodes', mesh.get_nodes(fixed_shoulder_nodes.tolist()), fixed_shoulder_nodes, visualise=visualise, colours=(1,0,0), point_size=10, text_size=5)

        #ixed_elements = [10,11,21,22,32,33,43,44,54,55,65,66,76,77,87,88,98,99,109,110,120,121,131,132]
        #stiffer_transition_elements = [9,20,31,42,53,64,75,86,97,108,119,130]

    # Group nodes on the anterior portion of the breast mesh
    if side == 'both':
        rhs_anterior_elems = [0, 1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61]
        lhs_anterior_elems = [66, 67, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 116, 121, 122, 123, 124, 125, 126, 127]

        rhs_anterior_nodes = []
        for element_id in rhs_anterior_elems:
            element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
            rhs_anterior_nodes += element_node_ids.tolist()
        rhs_anterior_nodes = numpy.unique(rhs_anterior_nodes)

        lhs_anterior_nodes = []
        for element_id in lhs_anterior_elems:
            element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
            lhs_anterior_nodes += element_node_ids.tolist()
        lhs_anterior_nodes = numpy.unique(lhs_anterior_nodes)

        all_anterior_nodes = scipy.hstack([rhs_anterior_nodes, lhs_anterior_nodes])

        rhs_transition_elems = [8,19,30,41,52,63]
        lhs_transition_elems = [74,85,96,107,118,129]

        all_transition_nodes = []
        for element_id in rhs_transition_elems + lhs_transition_elems:
            element_node_ids = scipy.array(mesh.elements[element_id].node_ids)
            all_transition_nodes += element_node_ids.tolist()
        all_transition_nodes = numpy.unique(all_transition_nodes)

        #import ipdb; ipdb.set_trace()

    # Export dof groups
    if export_groups:
        hdf5_main_grp = h5py.File('{0}/dof_groups_{1}.h5'.format(export_folder,side), 'w')
        hdf5_main_grp.create_dataset('/elements/cranial', data = cranial_elem)
        hdf5_main_grp.create_dataset('/elements/caudal', data = caudal_elem)
        hdf5_main_grp.create_dataset('/elements/chestwall', data = chestwall_elem)
        hdf5_main_grp.create_dataset('/elements/skin', data = skin_elem)
        hdf5_main_grp.create_dataset('/nodes/cranial', data = cranial_nodes)
        hdf5_main_grp.create_dataset('/nodes/caudal', data = caudal_nodes)
        hdf5_main_grp.create_dataset('/nodes/chestwall', data = chestwall_nodes)
        hdf5_main_grp.create_dataset('/nodes/skin', data = skin_nodes)
        if side != 'both':
            hdf5_main_grp.create_dataset('/elements/sternum', data = sternum_elem)
            hdf5_main_grp.create_dataset('/elements/spine', data = spine_elem)
            hdf5_main_grp.create_dataset('/nodes/sternum', data = sternum_nodes)
            hdf5_main_grp.create_dataset('/nodes/spine', data = spine_nodes)
        if side == 'both':
            hdf5_main_grp.create_dataset('/elements/stiffer_back', data = stiffer_elements)
            hdf5_main_grp.create_dataset('/nodes/stiffer_back', data = stiffer_nodes)
            hdf5_main_grp.create_dataset('/elements/transitional', data = transitional_elements)
            hdf5_main_grp.create_dataset('/nodes/transitional', data = transitional_nodes)
            hdf5_main_grp.create_dataset('/elements/stiffer_rib', data = stiffer_rib_elements)
            hdf5_main_grp.create_dataset('/nodes/stiffer_rib', data = stiffer_rib_nodes)
            hdf5_main_grp.create_dataset('/nodes/stiffer_shoulder', data = stiffer_shoulder_nodes)
            hdf5_main_grp.create_dataset('/nodes/fixed_shoulder', data = fixed_shoulder_nodes)

            hdf5_main_grp.create_dataset('/nodes/rhs_anterior_nodes', data = rhs_anterior_nodes)
            hdf5_main_grp.create_dataset('/nodes/lhs_anterior_nodes', data = lhs_anterior_nodes)
            hdf5_main_grp.create_dataset('/nodes/all_anterior_nodes', data = all_anterior_nodes)
            hdf5_main_grp.create_dataset('/nodes/all_transition_nodes', data = all_transition_nodes)
            

